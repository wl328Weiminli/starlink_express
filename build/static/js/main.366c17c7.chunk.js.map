{"version":3,"sources":["assets/images/spacex_logo.svg","components/Header.js","components/Footer.js","constants.js","components/SatSetting.js","assets/images/satellite.svg","components/SatelliteList.js","components/WorldMap.js","components/Main.js","components/App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","starlinkLogo","alt","Component","Footer","MY_API","SatSettingForm","showSatellite","e","preventDefault","props","form","validateFields","err","values","onShow","getFieldDecorator","this","labelCol","xs","span","sm","wrapperCol","onSubmit","Item","label","rules","required","message","min","max","style","width","placeholder","type","htmlType","textAlign","SatSetting","Form","create","name","SatelliteList","state","selected","showMap","onShowMap","onChange","target","dataInfo","checked","list","addOrRemove","setState","item","status","found","some","entry","satid","push","filter","satInfo","isLoad","satList","above","size","disabled","length","onClick","tip","itemLayout","dataSource","renderItem","actions","Meta","avatar","satellite","title","satname","description","launchDate","prevProps","prevState","snapshot","height","WorldMap1","track","data","hasOwnProperty","Error","len","positions","context2","map","now","Date","i","timer","setInterval","ct","timePassed","time","getTime","clearRect","font","fillStyle","fillText","d3TimeFormat","clearInterval","isDrawing","document","getElementsByClassName","innerHTML","forEach","sat","info","drawSat","pos","satlongitude","satlatitude","nameWithNumber","match","join","projection","xy","color","beginPath","arc","Math","PI","fill","generateMap","land","geoKavrayskiy7","scale","translate","precision","graticule","geoGraticule","canvas","d3Select","refMap","current","attr","canvas2","refTrack","context","node","getContext","path","geoPath","ele","strokeStyle","globalAlpha","stroke","lineWidth","outline","isLoading","d3Scale","schemeCategory10","React","createRef","axios","get","then","res","feature","objects","countries","features","catch","console","log","satData","observerData","latitude","longitude","altitude","endTime","duration","urls","url","all","spread","args","ref","Main","preState","showNearbySatellite","setting","isLoadingList","fetchSatellite","elevation","response","error","WorldMap","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.366c17c7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/spacex_logo.ad25dfff.svg\";","import React, {Component} from 'react';\nimport starlinkLogo  from '../assets/images/spacex_logo.svg';\n\nclass Header extends Component {\n    render() {\n        return (\n            <header className=\"App-header\">\n                <img src={starlinkLogo} className=\"App-logo\" alt=\"logo\" />\n                <p className=\"title\">\n                    StarLink Tracker\n                </p>\n            </header>\n        );\n    }\n}\n\nexport default Header;\n","import React, {Component} from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer className=\"footer\">\n                ©2020 StarLink Tracker. All Rights Reserved. Website Made by Weimin Li\n            </footer>\n        );\n    }\n}\n\nexport default Footer;\n","// export const SAT_API_KEY = \"29S8QF-TT4KYL-LTDKM7-4LW7\";\n//\n// export const STARLINK_CATEGORY = \"52\";\n//\n// export const NEARBY_SATELLITE = \"rest/v1/satellite/above\";\nexport const NEARBY_SATELLITE = \"satList\";\nexport const WORLD_MAP_URL = \"https://unpkg.com/world-atlas@1/world/110m.json\";\n\n// export const SATELLITE_POSITION_URL = \"rest/v1/satellite/positions\";\nexport const SATELLITE_POSITION_URL = \"position\";\nexport const MY_API = \"http://localhost:3000\";","import React, { Component } from \"react\";\nimport { Form, Button, InputNumber } from \"antd\";\n\nclass SatSettingForm extends Component {\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: { span: 24 },\n                sm: { span: 11 }\n            },\n            wrapperCol: {\n                xs: { span: 24 },\n                sm: { span: 13 }\n            }\n        };\n        return (\n            <Form\n                {...formItemLayout}\n                className=\"sat-setting\"\n                onSubmit={this.showSatellite}\n            >\n                <Form.Item label=\"Longitude(degrees)\">\n                    {getFieldDecorator(\"longitude\", {\n                        rules: [\n                            {\n                                required: true,\n                                message: \"Please input your Longitude\"\n                            }\n                        ]\n                    })(\n                        <InputNumber\n                            min={-180}\n                            max={180}\n                            style={{ width: \"100%\" }}\n                            placeholder=\"Please input Longitude\"\n                        />\n                    )}\n                </Form.Item>\n\n                <Form.Item label=\"Latitude(degrees)\">\n                    {getFieldDecorator(\"latitude\", {\n                        rules: [\n                            {\n                                required: true,\n                                message: \"Please input your Latitude\"\n                            }\n                        ]\n                    })(\n                        <InputNumber\n                            placeholder=\"Please input Latitude\"\n                            min={-90}\n                            max={90}\n                            style={{ width: \"100%\" }}\n                        />\n                    )}\n                </Form.Item>\n\n                <Form.Item label=\"Elevation(meters)\">\n                    {getFieldDecorator(\"elevation\", {\n                        rules: [\n                            {\n                                required: true,\n                                message: \"Please input your Elevation\"\n                            }\n                        ]\n                    })(\n                        <InputNumber\n                            placeholder=\"Please input Elevation\"\n                            min={-413}\n                            max={8850}\n                            style={{ width: \"100%\" }}\n                        />\n                    )}\n                </Form.Item>\n\n                <Form.Item label=\"Altitude(degrees)\">\n                    {getFieldDecorator(\"altitude\", {\n                        rules: [\n                            {\n                                required: true,\n                                message: \"Please input your Altitude\"\n                            }\n                        ]\n                    })(\n                        <InputNumber\n                            placeholder=\"Please input Altitude\"\n                            min={0}\n                            max={90}\n                            style={{ width: \"100%\" }}\n                        />\n                    )}\n                </Form.Item>\n\n                <Form.Item label=\"Duration(secs)\">\n                    {getFieldDecorator(\"duration\", {\n                        rules: [\n                            {\n                                required: true,\n                                message: \"Please input your Duration\"\n                            }\n                        ]\n                    })(\n                        <InputNumber\n                            placeholder=\"Please input Duration\"\n                            min={0}\n                            max={90}\n                            style={{ width: \"100%\" }}\n                        />\n                    )}\n                </Form.Item>\n                <Form.Item className=\"show-nearby\">\n                    <Button\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                        style={{ textAlign: \"center\" }}\n                    >\n                        Find Nearby Satellite\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n\n    showSatellite = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                // console.log('Received values of form: ', values);\n                this.props.onShow(values);\n            }\n        });\n    };\n}\n\nconst SatSetting = Form.create({ name: \"satellite-setting\" })(SatSettingForm);\n\nexport default SatSetting;\n","export default __webpack_public_path__ + \"static/media/satellite.d327b26a.svg\";","import React, {Component} from 'react';\nimport { Button, Spin, List, Avatar, Checkbox } from 'antd';\n\nimport satellite from '../assets/images/satellite.svg';\n\nclass SatelliteList extends Component {\n    state = {\n        selected: []\n    }\n\n    render() {\n        const { selected } = this.state;\n        const {satInfo, isLoad} = this.props;\n        const satList = satInfo ? satInfo.above : [];\n\n        return (\n            <div className=\"sat-list-box\">\n                <Button className=\"sat-list-btn\" size=\"large\"\n                        disabled={ selected.length === 0}\n                        onClick={this.showMap} >\n                    Track on the map\n                </Button>\n                <hr/>\n                {\n                    isLoad ?\n                        <div className=\"spin-box\">\n                            <Spin tip=\"Loading...\" size=\"large\"/>\n                        </div>\n                        :\n                        <List className=\"sat-list\"\n                              itemLayout=\"horizontal\"\n                              dataSource={satList}\n                              renderItem={ item => (\n                                  <List.Item actions={[<Checkbox dataInfo={item} onChange={this.onChange}/>]}>\n                                      <List.Item.Meta\n                                          avatar={<Avatar src={satellite} size=\"large\" alt=\"satellite\"/>}\n                                          title={<p>{item.satname}</p>}\n                                          description={`Launch Date: ${item.launchDate}`}\n                                      />\n                                  </List.Item>\n                              )}\n                        />\n                }\n            </div>\n        );\n    }\n\n    showMap = () => {\n        const { selected } = this.state;\n        this.props.onShowMap(selected);\n    }\n\n    onChange = e => {\n        const { dataInfo, checked } = e.target;\n        const { selected } = this.state;\n        const list = this.addOrRemove(dataInfo, checked, selected);\n        this.setState({\n            selected: list\n        })\n    }\n\n    addOrRemove = (item, status, list) => {\n        const found = list.some( entry => entry.satid === item.satid );\n\n        if(status && !found) {\n            list.push(item);\n        }\n\n        if(!status && found) {\n            list = list.filter( entry => entry.satid !== item.satid);\n        }\n\n        return list;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(prevProps.satInfo !== this.props.satInfo) {\n            this.setState({selected: []})\n        }\n    }\n}\n\nexport default SatelliteList;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Spin } from \"antd\";\nimport { feature } from \"topojson-client\";\nimport { geoKavrayskiy7 } from \"d3-geo-projection\";\nimport { geoGraticule, geoPath } from \"d3-geo\";\nimport { select as d3Select } from \"d3-selection\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\n\nimport {\n    WORLD_MAP_URL,\n    MY_API,\n    SATELLITE_POSITION_URL\n} from \"../constants\";\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap1 extends Component {\n    constructor() {\n        super();\n        this.state = {\n            isLoading: false,\n            isDrawing: false\n        };\n        this.map = null;\n        this.color = d3Scale.scaleOrdinal(schemeCategory10);\n        this.refMap = React.createRef();\n        this.refTrack = React.createRef();\n    }\n\n    componentDidMount() {\n        axios\n            .get(WORLD_MAP_URL)\n            .then(res => {\n                const { data } = res;\n                const land = feature(data, data.objects.countries).features;\n                this.generateMap(land);\n            })\n            .catch(e => {\n                console.log(\"err in fetch map data \", e.message);\n            });\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.satData !== this.props.satData) {\n            const {\n                latitude,\n                longitude,\n                // elevation,\n                altitude,\n                duration\n            } = this.props.observerData;\n            const endTime = duration * 60;\n\n            this.setState({\n                isLoading: true\n            });\n\n            const urls = this.props.satData.map(sat => {\n                const { satid } = sat;\n                // const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${altitude}/${endTime}/&apiKey=${SAT_API_KEY}`;\n                const url = `${MY_API}/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${altitude}/${endTime}`\n                return axios.get(url);\n            });\n\n            axios\n                .all(urls)\n                .then(\n                    axios.spread((...args) => {\n                        return args.map(item => item.data);\n                    })\n                )\n                .then(res => {\n                    this.setState({\n                        isLoading: false,\n                        isDrawing: true\n                    });\n                    // don't allow draw when drawing\n                    if (!prevState.isDrawing) {\n                        this.track(res);\n                    } else {\n                        const oHint = document.getElementsByClassName(\"hint\")[0];\n                        oHint.innerHTML =\n                            \"Please wait for these satellite animation to finish before selection new ones!\";\n                    }\n                })\n                .catch(e => {\n                    console.log(\"err in fetch satellite position -> \", e.message);\n                });\n        }\n    }\n\n    track = data => {\n        if (!data[0].hasOwnProperty(\"positions\")) {\n            throw new Error(\"no position data\");\n            // return;\n        }\n\n        const len = data[0].positions.length;\n        // const { duration } = this.props.observerData;\n        const { context2 } = this.map;\n\n        let now = new Date();\n\n        let i = 0;\n\n        let timer = setInterval(() => {\n            let ct = new Date();\n            let timePassed = i === 0 ? 0 : ct - now;\n            let time = new Date(now.getTime() + 60 * timePassed);\n            context2.clearRect(0, 0, width, height);\n\n            context2.font = \"bold 14px sans-serif\";\n            context2.fillStyle = \"#333\";\n            context2.textAlign = \"center\";\n            context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n            if (i >= len) {\n                // clear the interval\n                clearInterval(timer);\n                this.setState({ isDrawing: false });\n                const oHint = document.getElementsByClassName(\"hint\")[0];\n                oHint.innerHTML = \"\";\n                // context2.clearRect(0, 0, width, height);\n                return;\n            }\n\n            data.forEach(sat => {\n                const { info, positions } = sat;\n                this.drawSat(info, positions[i]);\n            });\n\n            i += 60;\n        }, 1000);\n    };\n\n    drawSat = (sat, pos) => {\n        const { satlongitude, satlatitude } = pos;\n\n        if (!satlongitude || !satlatitude) return;\n\n        const { satname } = sat;\n        const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n\n        const { projection, context2 } = this.map;\n        const xy = projection([satlongitude, satlatitude]);\n\n        context2.fillStyle = this.color(nameWithNumber);\n        context2.beginPath();\n        // satellite shape\n        context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n        context2.fill();\n\n        context2.font = \"bold 11px sans-serif\";\n        context2.textAlign = \"center\";\n        context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n    };\n\n    render() {\n        const { isLoading } = this.state;\n        return (\n            <div className=\"map-box\">\n                 {/*load data   */}\n                {isLoading ? (\n                    <div className=\"spinner\">\n                        <Spin tip=\"Loading...\" size=\"large\" />\n                    </div>\n                ) : null}\n                <canvas className=\"map\" ref={this.refMap} />\n                <canvas className=\"track\" ref={this.refTrack} />\n                <div className=\"hint\" />\n            </div>\n        );\n    }\n\n    generateMap = land => {\n        const projection = geoKavrayskiy7()\n            .scale(170)\n            .translate([width / 2, height / 2])\n            .precision(0.1);\n\n        const graticule = geoGraticule();\n\n        // d3 set the canvas\n\n        const canvas = d3Select(this.refMap.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        const canvas2 = d3Select(this.refTrack.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        // draw the on canvas\n\n        const context = canvas.node().getContext(\"2d\");\n        const context2 = canvas2.node().getContext(\"2d\");\n\n        let path = geoPath()\n            .projection(projection)\n            .context(context);\n\n        land.forEach(ele => {\n            context.fillStyle = \"#B3DDEF\";\n            context.strokeStyle = \"#000\";\n            context.globalAlpha = 0.7;\n            context.beginPath();\n            path(ele);\n            context.fill();\n            context.stroke();\n\n            context.strokeStyle = \"rgba(220, 220, 220, 0.1)\";\n            context.beginPath();\n            path(graticule());\n            context.lineWidth = 0.1;\n            context.stroke();\n\n            context.beginPath();\n            context.lineWidth = 0.5;\n            path(graticule.outline());\n            context.stroke();\n        });\n\n        // set to class level so that we can find it\n\n        this.map = {\n            projection: projection,\n            graticule: graticule,\n            context: context,\n            context2: context2\n        };\n    };\n}\n\nexport default WorldMap1;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport {MY_API, NEARBY_SATELLITE} from \"../constants\";\nimport SatSetting from \"./SatSetting\";\nimport SatelliteList from \"./SatelliteList\";\nimport WorldMap from \"./WorldMap\";\n\nclass Main extends Component {\n    constructor() {\n        super();\n        this.state = {\n            satInfo: null,\n            satList: null,\n            setting: null,\n            isLoadingList: false\n        };\n    }\n    render() {\n        const { isLoadingList, satInfo, satList, setting } = this.state;\n        return (\n            <div className=\"main\">\n                <div className=\"left-side\">\n                    <SatSetting onShow={this.showNearbySatellite} />\n                    <SatelliteList\n                        isLoad={isLoadingList}\n                        satInfo={satInfo}\n                        onShowMap={this.showMap}\n                    />\n                </div>\n                <div className=\"right-side\">\n                    <WorldMap satData={satList} observerData={setting} />\n                </div>\n            </div>\n        );\n    }\n\n    showMap = selected => {\n        this.setState(preState => ({\n            ...preState,\n            satList: [...selected]\n        }));\n    };\n\n    showNearbySatellite = setting => {\n        this.setState({\n            isLoadingList: true,\n            setting: setting\n        });\n        this.fetchSatellite(setting);\n    };\n\n    fetchSatellite = setting => {\n        const { latitude, longitude, elevation, altitude } = setting;\n        // const url = `/api/${NEARBY_SATELLITE}/${latitude}/${longitude}/${elevation}/${altitude}/${STARLINK_CATEGORY}/&apiKey=${SAT_API_KEY}`;\n        // http://localhost:3000/satList/-40/70/90/90\n        const url = `${MY_API}/${NEARBY_SATELLITE}/${latitude}/${longitude}/${elevation}/${altitude}`\n        this.setState({\n            isLoadingList: true\n        });\n\n        axios\n            .get(url)\n            .then(response => {\n                this.setState({\n                    satInfo: response.data,\n                    isLoadingList: false\n                });\n            })\n            .catch(error => {\n                console.log(\"err in fetch satellite -> \", error);\n            });\n    };\n}\n\nexport default Main;\n","import React from 'react';\nimport Header from './Header';\nimport Footer from './Footer';\nimport Main from './Main';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Header />\n     <Main />\n     <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nreportWebVitals();"],"sourceRoot":""}